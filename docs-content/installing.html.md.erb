---
title: Installing and Configuring Zettaset XCrypt Full Disk
owner: Partners
---

This topic describes how to install and configure Zettaset XCrypt Full Disk.


##<a id='install'></a> Install Zettaset XCrypt Full Disk

Your Greenplum and Pivotal Gemfire primary, seconday, and segment nodes should be installed prior to installing Zettaset XCrypt Full Disk. Once Greenplum and Pivotal Gemfire have been successfully installed, install Zettaset XCrypt Full Disk on all segment nodes that hold data volumes. After the Zettaset installation, data can be populated on the data volumes. 

For existing Greenplum and Pivotal Gemfire environments, data must be backed up prior to the Zettaset XCrypt Full Disk installation. After the Zettaset installation, data can be restored to the data volumes. 


## <a id='configuring_installer'></a> Configuring the Installer Node

On the installer node, do the following:

1. Establish SSH trust between the installer node and all target nodes. This prevents errors when running SSH commands. To create SSH trust:
    1. Generate an SSH key for the installer, if one doesn't already exist.

        ``` 
           $ ssh-keygen
        ``` 
    1. Distribute the key to each target node.

        ```
        $ ssh-copy-id root@<node01>
        $ ssh-copy-id root@<node02>
        ...
        ```

1. Install ansible on the installer node. This requires the Extra Packages for Enterprise Linux (epel-release) package.

    ``` 
    $ yum install epel-release -y
    $ yum install ansible -y
    $ ansible --version
    ```

1. Install the Zettaset archive file.
    ``` 
    $ scp -P 22 zts-XCryptFullDisk-8.4.0.tar.gz root@node01.public.local:/opt
    ``` 

1. Extract the archive.

    ```
    $ ssh node01.public.local
    $ cd /opt
    $ tar zxvf zts-XCryptFullDisk-8.4.0.tar.gz
    ```

1. Copy hosts.inv.example to hosts.inv.

    ```
    $ cd /opt/zettaset/XCryptFullDisk/8.4.0
    $ cp hosts.inv.example hosts.inv
    ```

1. When testing this product, you might want to configure the following partitions and mount points on a test node. This will be the encrypted partition. Instructions in a later section illustrate how to use these specific partitions. SSH to the data nodes in your cluster and run the following commands:

    ```      
    $ mkfs.ext4 /dev/sdc1                          # create a file system sdc1
    $ mkdir -p /var/lib/zts/slave/crypt1           # makes the linux dir
    ```
    ext3, ext4, and xfs file systems are supported. Be sure that your desired file system is installed on your target node before installing XCrypt Full Disk (e.g., xfs is not always available by default).

1. Proceed to [Configuring the Inventory File](#configuring_inv). 


## <a id='configuring_inv'></a> Configuring the Inventory File

The inventory file (hosts.inv) sets the configuration properties used for the installation. An annotated sample file (hosts.inv.pivnet) is included with the Zettaset software. The sections of this file are explained below.

**All Nodes**

```
node01 encrypted_blockdev=/dev/sdc1 encrypted_mountpoint=/crypt1 encrypted_mountnames=crypt1 encrypted_preserve=n fstype=ext4 newfsargs=none kmip_client_jks=/opt/node01.jks kmip_client_jks_passwd="1234"

node02 encrypted_blockdev=/dev/sdc1 encrypted_mountpoint=/crypt1 encrypted_mountnames=crypt1 encrypted_preserve=n fstype=ext4 newfsargs=none kmip_client_jks=/opt/node02.jks kmip_client_jks_passwd="1234"

node03 encrypted_blockdev=/dev/sdc1 encrypted_mountpoint=/crypt1 encrypted_mountnames=crypt1 encrypted_preserve=n fstype=ext4 newfsargs=none kmip_client_jks=/opt/node03.jks kmip_client_jks_passwd="1234"
```

List each node in your deployment using hostnames or IP addresses. For each node, include the following variables:

* `encrypted_blockdev` - Enter the block device to be encrypted.
* `encrypted_mountpoint` - Enter a mount point for the device. The mount point must exist before the install.
* `encrypted_mountnames` - Enter a partition name. Each name must be unique for each partition on the node.
* `encrypted_preserve` - Use one of the following values:
    * **y** - Preserves existing data. The file system must be mounted before the install. If the partition is not mounted, the data will be overwritten. The partition must also be unmountable. If a process prevents the unmount, encryption cannot start. Only ext file systems can be preserved. 
    * **n** - Does not preserve existing data. The partition must be unmounted.
    * **w** - Securely wipes the partition before the new encrypted file system is created. The partition must be unmounted.
* `fstype` - Must be set to the type of file system to make when `encrypted_preserve` is y or w. Must be set to the existing file system type when `encrypted_preserve=n`. Typical file system types include `ext4` and `xfs`.
* `newfsargs` - A string of arguments to pass to the `mkfs` command. If there are spaces between multiple arguments, surround the string in double quotes (i.e., "-b size 2048"). When no arguments are to be passed, set this value to `none`.
* `kmip_client_jks` - Location and filename of the Java KeyStore containing the client key and certificate that enables this node to communicate with your key manager. The Java KeyStore must be local to the installer node. 
* `kmip_client_jks_passwd` - The password used to access the Java KeyStore. Enclose your value in quotes: `"somePassword"`.


When encrypting multiple partitions on a node, use commas to separate values. For newfsargs, use colons to separate values and include values for all settings, even if that value is `none`. For example:
```
node01 encrypted_blockdev=/dev/sdd,/dev/sde encrypted_mountpoint=/crypt1,/crypt2 encrypted_mountnames=crypt1,crypt2 encrypted_preserve=y,n fstype=ext4,xfs newfsargs=none:"-b size=2048 -d su=64k,sw=4" kmip_client_jks=/opt/some.jks kmip_client_jks_passwd="1234"
```

The hostnames provided above must resolve. If some nodes are separated by a proxy (like if you are deploying to nodes in skytap from your laptop) use the `ansible_ssh_host` and `ansible_ssh_port` variables. Otherwise, do not use those variables. 

**CA Configuration**

```
external_ca_cert_source=
```

A CA is required to authenticate nodes within your deployment. Enter the full path to the CA PEM file in `external_ca_cert_source`.

**Key Manager Configuration**

```
kmip_master_ip=10.1.0.1
kmip_server_port=6666
kmip_client_timeout=300000
```

A KMIP compatible key manager is required to process key requests. Set the `kmip_master_ip` and `kmip_master_port` to point to your key management device. Additionally, you must have a valid, CA-signed key manager client certificate in pkcs12 format, stored in a keystore on the installer node. Use the `kmip_client_jks` and `kmip_client_jks_passwd` settings shown under the **All Nodes** section to store the Java KeyStore location on the installer node and the Java KeyStore password.
The key manager's CA certificate must be available in PEM format on the installer node, and its location set in the `external_ca_cert_source` setting described above.

Use `kmip_client_timeout` to configure the timeout setting, or just keep the default value of 300000.

**HSM Configuration**

```
hsm_so_pin=12345678
hsm_user_pin=12345678
hsm_slot=1
hsm_lib_cfg_env_var=
hsm_lib_file=
```

An HSM is required for key storage. To create and use an internal, software-based HSM, select 4-8 alphanumeric characters for both `hsm_so_pin` and `hsm_user_pin`. Keep `hsm_slot` pointed to slot 1. To use a third-party HSM, use the security office and user pin values for `hsm_so_pin` and `hsm_user_pin`. Point `hsm_slot` to your deviceâ€™s slot number. Use `hsm_lib_cfg_env_var` to configure any environment variables required by your HSM, for example: `hsm_lib_cfg_env_var=env_var_name=value`. Use `hsm_lib_file` to point to the location of your pkcs11 module.

NOTE: When using a third party HSM, remember to secure the PINs in this file after the installation.

**Node Functions**

```
[license_master]
node01

[slave]
node01
node02
node03
```

The bracketed values indicate the function a node will have in the deployment. Be sure that these settings agree with the other values in this file.

`[license_master]` - The node that will house your Zettaset license. When using Zettaset's vEKM, this should be the `ca_master` used for that installation.

`[slave]` - List of the nodes that will have encrypted partitions.  

Once the inventory file is configured, you are ready to install the product. If you need to zeroize data on a partition prior to encrypting, proceed to [Manually Zeroizing Old Data](#zeroizing), below. Otherwise, proceed to [Installing Zettaset XCrypt Full Disk](#installing).

       
## <a id='zeroizing'></a> Manually Zeroizing Old Data

For each partition where you are not preserving existing data (where `encrypted_preserve=n`) and which previously held sensitive data, the partition should be wiped before being encrypted. Otherwise, some blocks may not be overwritten with encrypted data right away and could be recovered. 

Use the umount and wipefs commands to unmount and zeroize:

```
$ umount <partition name>
$ wipefs <partition name>
$ cat /dev/zero > <partition name>
```

For example, to zeroize partition /dev/sdb1:

```
$ umount /dev/sdb1
$ wipefs /dev/sdb1
$ cat /dev/zero > /dev/sdb1
```


## <a id='installing'></a> Installing Zettaset XCrypt Full Disk

The installer sends the Zettaset XCrypt Full Disk libraries and configuration files to each target node. It also encrypts the nodes and partitions listed in the hosts.inv file. 

1. Perform a sanity check on the inventory file. This will confirm that the settings in your file are valid.

    ```
    $ cd /opt/zettaset/8.4.0/XCryptFullDisk 
    $ ./install_zts-xcrypt-full-disk.sh -vv -i hosts.inv check
    ```

1. Run the installer. This will establish secure connectivity between all nodes and services, and encrypt partitions.

    ```
    $ cd /opt/zettaset/8.4.0/XCryptFullDisk
    $ ./install_zts-xcrypt-full-disk.sh -vv -i hosts.inv install
    ```

1. View each target node's block devices to confirm partition encryption. Your output will reflect your partitions.

    ```
    $ ssh node01 "lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT"
    NAME               FSTYPE         SIZE    MOUNTPOINT
    sdc                               5G
    â””â”€sdc1             crypto_LUKS    5G
    â””â”€crypt1 (dm-2)    ext4           5G      /var/lib/zts/slave/crypt1
    ```

1. View the encryption keys by viewing cryptinittab on the target node:

    ```
    $ ssh node01 "cat /etc/zts/conf.default/cryptinittab"
    partition    mount point                  mapper name    key name
    /dev/sdc1    /var/lib/zts/slave/crypt1    crypt1         688eda4-337f-49fd
    ```

1. Review install.log when needed.

1. Remove any HSM PIN values from the hosts.inv file.
